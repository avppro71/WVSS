#include "stdafx.h"
#include "matrix.h"
void CMatrix::Invert(CMatrix *p_pDest)
{
 p_pDest->M[0][0] = M[1][2]*M[2][3]*M[3][1] - M[1][3]*M[2][2]*M[3][1] + M[1][3]*M[2][1]*M[3][2] - M[1][1]*M[2][3]*M[3][2] - M[1][2]*M[2][1]*M[3][3] + M[1][1]*M[2][2]*M[3][3];
 p_pDest->M[0][1] = M[0][3]*M[2][2]*M[3][1] - M[0][2]*M[2][3]*M[3][1] - M[0][3]*M[2][1]*M[3][2] + M[0][1]*M[2][3]*M[3][2] + M[0][2]*M[2][1]*M[3][3] - M[0][1]*M[2][2]*M[3][3];
 p_pDest->M[0][2] = M[0][2]*M[1][3]*M[3][1] - M[0][3]*M[1][2]*M[3][1] + M[0][3]*M[1][1]*M[3][2] - M[0][1]*M[1][3]*M[3][2] - M[0][2]*M[1][1]*M[3][3] + M[0][1]*M[1][2]*M[3][3];
 p_pDest->M[0][3] = M[0][3]*M[1][2]*M[2][1] - M[0][2]*M[1][3]*M[2][1] - M[0][3]*M[1][1]*M[2][2] + M[0][1]*M[1][3]*M[2][2] + M[0][2]*M[1][1]*M[2][3] - M[0][1]*M[1][2]*M[2][3];
 p_pDest->M[1][0] = M[1][3]*M[2][2]*M[3][0] - M[1][2]*M[2][3]*M[3][0] - M[1][3]*M[2][0]*M[3][2] + M[1][0]*M[2][3]*M[3][2] + M[1][2]*M[2][0]*M[3][3] - M[1][0]*M[2][2]*M[3][3];
 p_pDest->M[1][1] = M[0][2]*M[2][3]*M[3][0] - M[0][3]*M[2][2]*M[3][0] + M[0][3]*M[2][0]*M[3][2] - M[0][0]*M[2][3]*M[3][2] - M[0][2]*M[2][0]*M[3][3] + M[0][0]*M[2][2]*M[3][3];
 p_pDest->M[1][2] = M[0][3]*M[1][2]*M[3][0] - M[0][2]*M[1][3]*M[3][0] - M[0][3]*M[1][0]*M[3][2] + M[0][0]*M[1][3]*M[3][2] + M[0][2]*M[1][0]*M[3][3] - M[0][0]*M[1][2]*M[3][3];
 p_pDest->M[1][3] = M[0][2]*M[1][3]*M[2][0] - M[0][3]*M[1][2]*M[2][0] + M[0][3]*M[1][0]*M[2][2] - M[0][0]*M[1][3]*M[2][2] - M[0][2]*M[1][0]*M[2][3] + M[0][0]*M[1][2]*M[2][3];
 p_pDest->M[2][0] = M[1][1]*M[2][3]*M[3][0] - M[1][3]*M[2][1]*M[3][0] + M[1][3]*M[2][0]*M[3][1] - M[1][0]*M[2][3]*M[3][1] - M[1][1]*M[2][0]*M[3][3] + M[1][0]*M[2][1]*M[3][3];
 p_pDest->M[2][1] = M[0][3]*M[2][1]*M[3][0] - M[0][1]*M[2][3]*M[3][0] - M[0][3]*M[2][0]*M[3][1] + M[0][0]*M[2][3]*M[3][1] + M[0][1]*M[2][0]*M[3][3] - M[0][0]*M[2][1]*M[3][3];
 p_pDest->M[2][2] = M[0][1]*M[1][3]*M[3][0] - M[0][3]*M[1][1]*M[3][0] + M[0][3]*M[1][0]*M[3][1] - M[0][0]*M[1][3]*M[3][1] - M[0][1]*M[1][0]*M[3][3] + M[0][0]*M[1][1]*M[3][3];
 p_pDest->M[2][3] = M[0][3]*M[1][1]*M[2][0] - M[0][1]*M[1][3]*M[2][0] - M[0][3]*M[1][0]*M[2][1] + M[0][0]*M[1][3]*M[2][1] + M[0][1]*M[1][0]*M[2][3] - M[0][0]*M[1][1]*M[2][3];
 p_pDest->M[3][0] = M[1][2]*M[2][1]*M[3][0] - M[1][1]*M[2][2]*M[3][0] - M[1][2]*M[2][0]*M[3][1] + M[1][0]*M[2][2]*M[3][1] + M[1][1]*M[2][0]*M[3][2] - M[1][0]*M[2][1]*M[3][2];
 p_pDest->M[3][1] = M[0][1]*M[2][2]*M[3][0] - M[0][2]*M[2][1]*M[3][0] + M[0][2]*M[2][0]*M[3][1] - M[0][0]*M[2][2]*M[3][1] - M[0][1]*M[2][0]*M[3][2] + M[0][0]*M[2][1]*M[3][2];
 p_pDest->M[3][2] = M[0][2]*M[1][1]*M[3][0] - M[0][1]*M[1][2]*M[3][0] - M[0][2]*M[1][0]*M[3][1] + M[0][0]*M[1][2]*M[3][1] + M[0][1]*M[1][0]*M[3][2] - M[0][0]*M[1][1]*M[3][2];
 p_pDest->M[3][3] = M[0][1]*M[1][2]*M[2][0] - M[0][2]*M[1][1]*M[2][0] + M[0][2]*M[1][0]*M[2][1] - M[0][0]*M[1][2]*M[2][1] - M[0][1]*M[1][0]*M[2][2] + M[0][0]*M[1][1]*M[2][2]
 / Determinant();
}
double CMatrix::Determinant()
{
 return(
   M[0][3] * M[1][2] * M[2][1] * M[3][0]-M[0][2] * M[1][3] * M[2][1] * M[3][0]-M[0][3] * M[1][1] * M[2][2] * M[3][0]+M[0][1] * M[1][3] * M[2][2] * M[3][0]+
   M[0][2] * M[1][1] * M[2][3] * M[3][0]-M[0][1] * M[1][2] * M[2][3] * M[3][0]-M[0][3] * M[1][2] * M[2][0] * M[3][1]+M[0][2] * M[1][3] * M[2][0] * M[3][1]+
   M[0][3] * M[1][0] * M[2][2] * M[3][1]-M[0][0] * M[1][3] * M[2][2] * M[3][1]-M[0][2] * M[1][0] * M[2][3] * M[3][1]+M[0][0] * M[1][2] * M[2][3] * M[3][1]+
   M[0][3] * M[1][1] * M[2][0] * M[3][2]-M[0][1] * M[1][3] * M[2][0] * M[3][2]-M[0][3] * M[1][0] * M[2][1] * M[3][2]+M[0][0] * M[1][3] * M[2][1] * M[3][2]+
   M[0][1] * M[1][0] * M[2][3] * M[3][2]-M[0][0] * M[1][1] * M[2][3] * M[3][2]-M[0][2] * M[1][1] * M[2][0] * M[3][3]+M[0][1] * M[1][2] * M[2][0] * M[3][3]+
   M[0][2] * M[1][0] * M[2][1] * M[3][3]-M[0][0] * M[1][2] * M[2][1] * M[3][3]-M[0][1] * M[1][0] * M[2][2] * M[3][3]+M[0][0] * M[1][1] * M[2][2] * M[3][3]);
} 
